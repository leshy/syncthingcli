// Generated by LiveScript 1.3.1
(function(){
  var ref$, map, filter, fold1, find, keys, values, first, last, flatten, st, p, h, colors, util, self;
  ref$ = require('prelude-ls'), map = ref$.map, filter = ref$.filter, fold1 = ref$.fold1, find = ref$.find, keys = ref$.keys, values = ref$.values, first = ref$.first, last = ref$.last, flatten = ref$.flatten;
  st = require('syncthing-node');
  p = require('bluebird-extra');
  h = require('helpers');
  colors = require('colors');
  util = require('util');
  self = 'osvetnik';
  p.all([st.getConfig(), st.getConnections()]).then(function(result){
    var config, connections, devices;
    config = result[0], connections = result[1];
    devices = h.dictFromArray(config.Devices, function(it){
      var deviceID, deviceFolders;
      if (it.Name === self) {
        return;
      }
      deviceID = it.DeviceID;
      deviceFolders = h.dictFromArray(config.Folders, function(it){
        if (in$(deviceID, map(function(it){
          return it.DeviceID;
        }, it.Devices || []))) {
          return [it.ID, h.extend({}, it)];
        }
      });
      return [
        it.Name, h.extend(it, connections[deviceID] || {}, {
          Folders: deviceFolders || []
        })
      ];
    });
    return p.mapOwn(devices, function(deviceData, deviceName){
      return new p(function(resolve, reject){
        return p.mapOwn(deviceData.Folders, function(folder, folderName){
          return new p(function(resolve, reject){
            return st.getCompletion(deviceData.DeviceID, folderName).then(function(result){
              folder.completion = result.completion;
              return resolve(folder);
            });
          });
        }).then(function(it){
          return resolve(h.extend(deviceData, {
            Folders: it
          }));
        });
      });
    }).then(function(result){
      h.map(result, function(deviceData, deviceName){
        console.log('');
        if (deviceData.Address) {
          console.log(colors.green(deviceName), colors.blue(deviceData.Address));
        } else {
          console.log(colors.red(deviceName));
        }
        return h.map(deviceData.Folders, function(folderData, folderName){
          return console.log(colors.yellow(h.pad(folderName, 15, ' ')), ' ', colors.green(folderData.completion + " %"));
        });
      });
      return console.log('');
    });
  })['catch'](function(error){
    return console.log('Error', error.stack);
  });
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
